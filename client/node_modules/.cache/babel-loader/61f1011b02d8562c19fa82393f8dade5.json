{"ast":null,"code":"var _jsxFileName = \"/Users/robertcrossland/Documents/pluralsight/JavaScript/Chat Application/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport socketio from \"socket.io-client\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = userState([]);\n  const ENDPOINT = \"localhost:5000\";\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = socketio(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    });\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(\"\"));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: message,\n    onChange: event => setMessage(event.target.value),\n    onKeyPress: event => event.key === \"Enter\" && sendMessage(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/robertcrossland/Documents/pluralsight/JavaScript/Chat Application/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","socketio","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","userState","ENDPOINT","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log","target","value","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BC,SAAS,CAAC,EAAD,CAAzC;AAEA,QAAMC,QAAQ,GAAG,gBAAjB;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEM,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBP,WAAW,CAACe,KAAZ,CAAkBX,QAAQ,CAACY,MAA3B,CAAvB;AAEAd,IAAAA,MAAM,GAAGD,QAAQ,CAACa,QAAD,CAAjB;AAEAR,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACe,IAAP,CAAY,MAAZ,EAAoB;AAAEZ,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB;AAEA,WAAO,MAAM;AACTL,MAAAA,MAAM,CAACe,IAAP,CAAY,YAAZ;AAEAf,MAAAA,MAAM,CAACgB,GAAP;AACH,KAJD;AAKH,GAfQ,EAeN,CAACJ,QAAD,EAAWV,QAAQ,CAACY,MAApB,CAfM,CAAT;AAiBAjB,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,MAAM,CAACiB,EAAP,CAAU,SAAV,EAAsBV,OAAD,IAAa;AAC9BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIN,CAACE,QAAD,CAJM,CAAT;;AAMA,QAAMS,WAAW,GAAIC,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGb,OAAH,EAAY;AACRP,MAAAA,MAAM,CAACe,IAAP,CAAY,aAAZ,EAA2BR,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACH;AACJ,GAND;;AAQAa,EAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ,EAAqBE,QAArB;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AACA,IAAA,KAAK,EAAEF,OADP;AAEA,IAAA,QAAQ,EAAGY,KAAD,IAAWX,UAAU,CAACW,KAAK,CAACI,MAAN,CAAaC,KAAd,CAF/B;AAGA,IAAA,UAAU,EAAGL,KAAD,IAAWA,KAAK,CAACM,GAAN,KAAc,OAAd,IAAyBP,WAAW,CAACC,KAAD,CAH3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ;AAUH,CAnDD;;AAqDA,eAAelB,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport socketio from \"socket.io-client\";\n\nlet socket;\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState(\"\");\n    const [room, setRoom] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n    const [messages, setMessages] = userState([]);\n    \n    const ENDPOINT = \"localhost:5000\";\n\n    useEffect(() => {\n        const { name, room } = queryString.parse(location.search);\n\n        socket = socketio(ENDPOINT);\n\n        setName(name);\n        setRoom(room);\n\n        socket.emit('join', { name, room });\n\n        return () => {\n            socket.emit(\"disconnect\");\n\n            socket.off();\n        }\n    }, [ENDPOINT, location.search]);\n\n    useEffect(() => {\n        socket.on(\"message\", (message) => {\n            setMessages([...messages, message]);\n        })\n    }, [messages]);\n\n    const sendMessage = (event) => {\n        event.preventDefault();\n\n        if(message) {\n            socket.emit('sendMessage', message, () => setMessage(\"\"));\n        }\n    }\n\n    console.log(message, messages);\n\n    return (\n        <div className=\"outerContainer\">\n            <div className=\"container\">\n                <input type=\"text\" \n                value={message} \n                onChange={(event) => setMessage(event.target.value)}\n                onKeyPress={(event) => event.key === \"Enter\" && sendMessage(event)} />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}